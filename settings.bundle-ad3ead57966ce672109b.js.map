{"version":3,"sources":["webpack:///./src/js/pages/settings/settings.js","webpack:///./src/js/pages/settings/settings-controller.js"],"names":["Settings","Component","constructor","super","this","onSubmit","e","preventDefault","props","controller","form","submit","onClickLogout","logout","render","serverErrors","isPending","className","map","error","i","key","inputClassName","type","placeholder","disabled","get","inputProps","rows","onClick","propTypes","PropTypes","object","isRequired","Mvc","ctrl","userController","currentUser","isAuthenticated","router","transitionTo","init","Form","children","name","initialValue","image","username","validate","validation","required","getUsernameValidator","bio","email","getPasswordValidator","actions","update","getResult","onFormChange","password","then"],"mappings":"mYAIe,MAAMA,UAAiBC,YACpCC,cACEC,QAEAC,KAAKC,SAAYC,IACfA,EAAEC,iBACFH,KAAKI,MAAMC,WAAWC,KAAKC,UAG7BP,KAAKQ,cAAgB,KACnBR,KAAKI,MAAMC,WAAWI,UAI1BC,SACE,MAAM,KAACJ,EAAD,aAAOK,EAAP,UAAqBC,GAAaZ,KAAKI,MAAMC,WAEnD,OAAO,yBAAKQ,UAAU,iBACpB,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,kCACb,wBAAIA,UAAU,kBAAd,iBAECF,GAAgB,wBAAIE,UAAU,kBAC5BF,EAAaG,IAAI,CAACC,EAAOC,IAAM,wBAAIC,IAAKD,GAAID,KAG/C,0BAAMd,SAAUD,KAAKC,UACnB,kCACE,8BAAUY,UAAU,cAClB,kBAAC,QAAD,GACEK,eAAe,eACfC,KAAK,OACLC,YAAY,yBACZC,SAAUT,GACNN,EAAKgB,IAAI,YAEjB,8BAAUT,UAAU,cAClB,kBAAC,QAAD,GACEK,eAAe,+BACfC,KAAK,OACLC,YAAY,YACZC,SAAUT,GACNN,EAAKgB,IAAI,eAEjB,8BAAUT,UAAU,cAClB,kBAAC,QAAD,GACEK,eAAe,+BACfC,KAAK,WACLC,YAAY,sBACZG,WAAY,CAACC,KAAM,KACnBH,SAAUT,GACNN,EAAKgB,IAAI,UAEjB,8BAAUT,UAAU,cAClB,kBAAC,QAAD,GACEK,eAAe,+BACfC,KAAK,QACLC,YAAY,QACZC,SAAUT,GACNN,EAAKgB,IAAI,YAEjB,8BAAUT,UAAU,cAClB,kBAAC,QAAD,GACEK,eAAe,+BACfC,KAAK,WACLC,YAAY,WACZC,SAAUT,GACNN,EAAKgB,IAAI,eAEjB,4BACET,UAAU,uCACVQ,SAAUT,GAFZ,qBAMJ,6BAEA,4BACEC,UAAU,yBACVQ,SAAUT,EACVa,QAASzB,KAAKQ,eAHhB,iCAWZZ,EAAS8B,UAAY,CACnBrB,WAAYsB,IAAUC,OAAOC,a,gCC9F/B,kEAOeC,cAAIzB,YAAW,WAC5B,MAAM0B,EAAO,CACXC,mBACA1B,KAAM,KACNK,aAAc,KAGhBoB,QAAe,KACb,IAAKE,IAAYC,gBAGf,OAFAC,IAAOC,aAAa,WAEb,EAGTC,MAGIA,EAAO,KACXN,EAAKzB,KAAO,IAAIgC,IAAK,CACnBC,SAAU,CACR,CACEC,KAAM,QACNC,aAAcR,IAAYS,OAE5B,CACEF,KAAM,WACNC,aAAcR,IAAYU,SAC1BC,SAAUC,qBAAWA,aAAWC,WAAYC,gBAE9C,CACEP,KAAM,MACNC,aAAcR,IAAYe,KAE5B,CACER,KAAM,QACNC,aAAcR,IAAYgB,MAC1BL,SAAUC,aAAWC,YAEvB,CACEN,KAAM,WACNI,SAAUM,gBAIdC,QAAS,CACP5C,OAAQ,KACNwB,EAAKqB,OAAOrB,EAAKzB,KAAK+C,eAI1BC,aAAc,KACZvB,EAAKpB,aAAe,SAwB1B,OAnBAoB,EAAKqB,OAAS,EAAET,WAAUM,QAAOM,WAAUb,QAAOM,UAChDjB,EAAKpB,aAAe,KAEbqB,IAAeoB,OAAO,CAACT,WAAUM,QAAOM,WAAUb,QAAOM,QAAMQ,KACpE,KACErB,IAAOC,aAAa,MAGrBzB,IACCoB,EAAKpB,aAAeA,KAK1BoB,EAAKtB,OAAS,KACZuB,IAAevB,SACf0B,IAAOC,aAAa,MAGfL","file":"settings.bundle-ad3ead57966ce672109b.js","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {Input} from 'crizmas-components';\n\nexport default class Settings extends Component {\n  constructor() {\n    super();\n\n    this.onSubmit = (e) => {\n      e.preventDefault();\n      this.props.controller.form.submit();\n    };\n\n    this.onClickLogout = () => {\n      this.props.controller.logout();\n    };\n  }\n\n  render() {\n    const {form, serverErrors, isPending} = this.props.controller;\n\n    return <div className=\"settings-page\">\n      <div className=\"container page\">\n        <div className=\"row\">\n          <div className=\"col-md-6 offset-md-3 col-xs-12\">\n            <h1 className=\"text-xs-center\">Your Settings</h1>\n\n            {serverErrors && <ul className=\"error-messages\">\n              {serverErrors.map((error, i) => <li key={i}>{error}</li>)}\n            </ul>}\n\n            <form onSubmit={this.onSubmit}>\n              <fieldset>\n                <fieldset className=\"form-group\">\n                  <Input\n                    inputClassName=\"form-control\"\n                    type=\"text\"\n                    placeholder=\"URL of profile picture\"\n                    disabled={isPending}\n                    {...form.get('image')} />\n                </fieldset>\n                <fieldset className=\"form-group\">\n                  <Input\n                    inputClassName=\"form-control form-control-lg\"\n                    type=\"text\"\n                    placeholder=\"Your Name\"\n                    disabled={isPending}\n                    {...form.get('username')} />\n                </fieldset>\n                <fieldset className=\"form-group\">\n                  <Input\n                    inputClassName=\"form-control form-control-lg\"\n                    type=\"textarea\"\n                    placeholder=\"Short bio about you\"\n                    inputProps={{rows: \"8\"}}\n                    disabled={isPending}\n                    {...form.get('bio')} />\n                </fieldset>\n                <fieldset className=\"form-group\">\n                  <Input\n                    inputClassName=\"form-control form-control-lg\"\n                    type=\"email\"\n                    placeholder=\"Email\"\n                    disabled={isPending}\n                    {...form.get('email')} />\n                </fieldset>\n                <fieldset className=\"form-group\">\n                  <Input\n                    inputClassName=\"form-control form-control-lg\"\n                    type=\"password\"\n                    placeholder=\"Password\"\n                    disabled={isPending}\n                    {...form.get('password')} />\n                </fieldset>\n                <button\n                  className=\"btn btn-lg btn-primary pull-xs-right\"\n                  disabled={isPending}>Update Settings</button>\n              </fieldset>\n            </form>\n\n            <hr />\n\n            <button\n              className=\"btn btn-outline-danger\"\n              disabled={isPending}\n              onClick={this.onClickLogout}>Or click here to logout.</button>\n          </div>\n        </div>\n      </div>\n    </div>;\n  }\n}\n\nSettings.propTypes = {\n  controller: PropTypes.object.isRequired\n};\n","import Mvc from 'crizmas-mvc';\nimport Form, {validation} from 'crizmas-form';\n\nimport router from '../../router';\nimport {currentUser} from '../../models/user';\nimport userController, {getUsernameValidator, getPasswordValidator} from '../../controllers/user';\n\nexport default Mvc.controller(function SettingsController() {\n  const ctrl = {\n    userController,\n    form: null,\n    serverErrors: null\n  };\n\n  ctrl.onEnter = () => {\n    if (!currentUser.isAuthenticated) {\n      router.transitionTo('/login');\n\n      return false;\n    }\n\n    init();\n  };\n\n  const init = () => {\n    ctrl.form = new Form({\n      children: [\n        {\n          name: 'image',\n          initialValue: currentUser.image\n        },\n        {\n          name: 'username',\n          initialValue: currentUser.username,\n          validate: validation(validation.required(), getUsernameValidator())\n        },\n        {\n          name: 'bio',\n          initialValue: currentUser.bio\n        },\n        {\n          name: 'email',\n          initialValue: currentUser.email,\n          validate: validation.required()\n        },\n        {\n          name: 'password',\n          validate: getPasswordValidator()\n        }\n      ],\n\n      actions: {\n        submit: () => {\n          ctrl.update(ctrl.form.getResult());\n        }\n      },\n\n      onFormChange: () => {\n        ctrl.serverErrors = null;\n      }\n    });\n  };\n\n  ctrl.update = ({username, email, password, image, bio}) => {\n    ctrl.serverErrors = null;\n\n    return userController.update({username, email, password, image, bio}).then(\n      () => {\n        router.transitionTo('/');\n      },\n\n      (serverErrors) => {\n        ctrl.serverErrors = serverErrors;\n      }\n    );\n  };\n\n  ctrl.logout = () => {\n    userController.logout();\n    router.transitionTo('/');\n  };\n\n  return ctrl;\n});\n"],"sourceRoot":""}