{"version":3,"file":"editor.bundle-19a756dacfda3d2731d4.js","mappings":"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","sources":["webpack:///./src/js/api/article.js","webpack:///./src/js/models/article.js","webpack:///./src/js/pages/editor/editor-controller.js","webpack:///./src/js/pages/editor/editor.js"],"sourcesContent":["import {get, post, put, del} from '../http';\nimport {toJson, getResponseErrors} from './utils';\n\nconst normalizeDates = (obj) => {\n  obj.createdAt = new Date(obj.createdAt);\n  obj.updatedAt = new Date(obj.updatedAt);\n};\n\nconst handleArticlesResult = (result) => {\n  result.articles.forEach(normalizeDates);\n\n  return result;\n};\n\nexport const getGlobalFeed = ({offset, limit}) => {\n  return get('articles', {offset, limit})\n    .then(toJson)\n    .then(handleArticlesResult);\n};\n\nexport const getOwnFeed = ({offset, limit}) => {\n  return get('articles/feed', {offset, limit})\n    .then(toJson)\n    .then(handleArticlesResult);\n};\n\nexport const getTagFeed = ({tag, offset, limit}) => {\n  return get('articles', {tag, offset, limit})\n    .then(toJson)\n    .then(handleArticlesResult);\n};\n\nexport const getOwnArticles = ({author, limit, offset}) => {\n  return get('articles', {author, offset, limit})\n    .then(toJson)\n    .then(handleArticlesResult);\n};\n\nexport const getFavoriteArticles = ({favorited, limit, offset}) => {\n  return get('articles', {favorited, offset, limit})\n    .then(toJson)\n    .then(handleArticlesResult);\n};\n\nexport const getArticle = ({slug}) => {\n  return get(`articles/${encodeURIComponent(slug)}`)\n    .then(toJson)\n    .then(({article}) => {\n      normalizeDates(article);\n\n      return {article};\n    });\n};\n\nexport const saveArticle = ({title, description, body, tagList}) => {\n  return post('articles', {\n    article: {\n      title,\n      description,\n      body,\n      tagList\n    }\n  }).then(toJson, getResponseErrors);\n};\n\nexport const updateArticle = ({slug, title, description, body, tagList}) => {\n  return put(`articles/${encodeURIComponent(slug)}`, {\n    article: {\n      title,\n      description,\n      body,\n      tagList\n    }\n  }).then(toJson, getResponseErrors);\n};\n\nexport const setFavorite = ({slug, isFavorite}) => {\n  const httpFunc = isFavorite ? post : del;\n\n  return httpFunc(`articles/${slug}/favorite`).then(toJson);\n};\n\nexport const getArticleComments = ({slug}) => {\n  return get(`articles/${encodeURIComponent(slug)}/comments`)\n    .then(toJson)\n    .then(({comments}) => {\n      comments.forEach(normalizeDates);\n\n      return {comments};\n    });\n};\n\nexport const deleteArticle = ({slug}) => {\n  return del(`articles/${encodeURIComponent(slug)}`);\n};\n\nexport const postComment = ({slug, comment}) => {\n  return post(`articles/${encodeURIComponent(slug)}/comments`, {\n    comment: {body: comment}\n  }).then(toJson).then(({comment}) => {\n    normalizeDates(comment);\n\n    return {comment};\n  });\n};\n\nexport const deleteComment = ({slug, commentId}) => {\n  return del(`articles/${encodeURIComponent(slug)}/comments/${commentId}`);\n};\n","import {User} from './user';\n\nexport function Article(articleData) {\n  const article = {\n    title: articleData.title,\n    author: new User(articleData.author),\n    description: articleData.description,\n    body: articleData.body,\n    slug: articleData.slug,\n    createdAt: articleData.createdAt,\n    updatedAt: articleData.updatedAt,\n    favorited: articleData.favorited,\n    favoritesCount: articleData.favoritesCount,\n    tagList: articleData.tagList,\n    comments: null\n  };\n\n  article.setFavorite = ({favorited, favoritesCount}) => {\n    article.favorited = favorited;\n    article.favoritesCount = favoritesCount;\n  };\n\n  article.setComments = (comments) => {\n    article.comments = comments;\n  };\n\n  article.addComment = (comment) => {\n    article.comments.unshift(comment);\n  };\n\n  article.deleteComment = (commentId) => {\n    const index = article.comments.findIndex((comment) => comment.id === commentId);\n\n    if (index !== -1) {\n      article.comments.splice(index, 1);\n    }\n  };\n\n  return article;\n}\n","import {controller} from 'crizmas-mvc';\nimport Form, {required} from 'crizmas-form';\n\nimport router from '../../router';\nimport {currentUser} from '../../models/user';\nimport {Article} from '../../models/article';\nimport * as articleApi from '../../api/article';\n\nexport default controller(function EditorController() {\n  const ctrl = {\n    isNew: false,\n    form: null,\n    serverErrors: null,\n    article: null\n  };\n\n  ctrl.onEnter = ({routeFragment}) => {\n    if (!currentUser.isAuthenticated) {\n      router.transitionTo('/login');\n\n      return false;\n    }\n\n    ctrl.isNew = !routeFragment.abstractPath;\n\n    if (!ctrl.isNew) {\n      return ctrl.getArticle(router.params.get('slug')).then(\n        init,\n\n        () => {\n          router.transitionTo('/');\n\n          return false;\n        }\n      );\n    }\n\n    init();\n  };\n\n  const init = () => {\n    ctrl.form = new Form({\n      children: [\n        {\n          name: 'title',\n          initialValue: ctrl.article && ctrl.article.title,\n          validate: required()\n        },\n        {\n          name: 'description',\n          initialValue: ctrl.article && ctrl.article.description\n        },\n        {\n          name: 'body',\n          initialValue: ctrl.article && ctrl.article.body,\n          validate: required()\n        },\n        {\n          name: 'tagString',\n\n          actions: {\n            submit: ctrl.updateTagList\n          }\n        },\n        {\n          name: 'tagList',\n          initialValue: ctrl.article && ctrl.article.tagList || []\n        }\n      ],\n\n      actions: {\n        submit: () => {\n          const result = ctrl.form.getResult();\n\n          ctrl.saveArticle({\n            title: result.title,\n            description: result.description,\n            body: result.body,\n            tagList: result.tagList\n          });\n        }\n      },\n\n      onFormChange: () => {\n        ctrl.serverErrors = null;\n      }\n    });\n  };\n\n  ctrl.getArticle = (slug) => {\n    return articleApi.getArticle({slug}).then(({article}) => {\n      ctrl.article = new Article(article);\n    });\n  };\n\n  ctrl.saveArticle = ({title, description, body, tagList}) => {\n    ctrl.serverErrors = null;\n\n    const savePromise = ctrl.isNew\n      ? articleApi.saveArticle({title, description, body, tagList})\n      : articleApi.updateArticle({slug: ctrl.article.slug, title, description, body, tagList});\n\n    return savePromise.then(\n      ({article: {slug}}) => {\n        router.transitionTo(`/article/${slug}`);\n      },\n\n      (serverErrors) => {\n        ctrl.serverErrors = serverErrors;\n      }\n    );\n  };\n\n  ctrl.updateTagList = () => {\n    const tagsListInput = ctrl.form.get('tagList');\n    const existingTagsList = tagsListInput.getValue();\n    const tagsStringInput = ctrl.form.get('tagString');\n    const result = tagsStringInput.getResult();\n    const newTagsList = result && result.split(',')\n      .map((tag) => tag.trim())\n      .filter((tag) => tag && !existingTagsList.includes(tag));\n\n    tagsStringInput.clear();\n\n    if (newTagsList && newTagsList.length) {\n      tagsListInput.onChange(existingTagsList.concat(newTagsList));\n    }\n  };\n\n  ctrl.removeTag = (tagIndex) => {\n    const tagListInput = ctrl.form.get('tagList');\n    const tagList = tagListInput.getValue();\n\n    tagList.splice(tagIndex, 1);\n  };\n\n  return ctrl;\n});\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {Input} from 'crizmas-components';\n\nexport default class Editor extends Component {\n  constructor() {\n    super();\n\n    this.onSubmit = (e) => {\n      e.preventDefault();\n      this.props.controller.form.submit();\n    };\n\n    this.onTagStringKeyPress = (e) => {\n      if (e.key === 'Enter') {\n        e.preventDefault();\n        this.props.controller.form.get('tagString').submit();\n      }\n    };\n  }\n\n  render() {\n    const {form, serverErrors, isPending, removeTag} = this.props.controller;\n    const tagList = form.get('tagList').getValue();\n\n    return <div className=\"editor-page\">\n      <div className=\"container page\">\n        <div className=\"row\">\n          <div className=\"col-md-10 offset-md-1 col-xs-12\">\n            {serverErrors && <ul className=\"error-messages\">\n              {serverErrors.map((error, i) => <li key={i}>{error}</li>)}\n            </ul>}\n\n            <form onSubmit={this.onSubmit}>\n              <fieldset>\n                <fieldset className=\"form-group\">\n                  <Input\n                    type=\"text\"\n                    inputClassName=\"form-control form-control-lg\"\n                    placeholder=\"Article Title\"\n                    disabled={isPending}\n                    {...form.get('title')} />\n                </fieldset>\n                <fieldset className=\"form-group\">\n                  <Input\n                    type=\"text\"\n                    inputClassName=\"form-control\"\n                    placeholder=\"What's this article about?\"\n                    disabled={isPending}\n                    {...form.get('description')} />\n                </fieldset>\n                <fieldset className=\"form-group\">\n                  <Input\n                    type=\"textarea\"\n                    inputClassName=\"form-control\"\n                    placeholder=\"Write your article (in markdown)\"\n                    inputProps={{rows: \"8\"}}\n                    disabled={isPending}\n                    {...form.get('body')} />\n                </fieldset>\n                <fieldset className=\"form-group\">\n                  <Input\n                    type=\"text\"\n                    inputClassName=\"form-control\"\n                    placeholder=\"Enter tags\"\n                    disabled={isPending}\n                    {...form.get('tagString')}\n                    inputProps={{onKeyPress: this.onTagStringKeyPress}} />\n                  {!!tagList.length && <div className=\"tag-list\">\n                    {tagList.map((tag, i) => <span\n                      key={i}\n                      className=\"tag-default tag-pill\">\n                        <i className=\"ion-close-round\" onClick={removeTag.bind(null, i)} />\n                        {tag}\n                      </span>)}\n                  </div>}\n                </fieldset>\n                <button\n                  className=\"btn btn-lg pull-xs-right btn-primary\"\n                  disabled={isPending}>\n                  Publish Article\n                </button>\n              </fieldset>\n            </form>\n          </div>\n        </div>\n      </div>\n    </div>;\n  }\n}\n\nEditor.propTypes = {\n  controller: PropTypes.object.isRequired\n};\n"],"names":["normalizeDates","obj","createdAt","Date","updatedAt","handleArticlesResult","result","articles","forEach","getGlobalFeed","offset","limit","get","then","toJson","getOwnFeed","getTagFeed","tag","getOwnArticles","author","getFavoriteArticles","favorited","getArticle","slug","encodeURIComponent","article","saveArticle","title","description","body","tagList","post","getResponseErrors","updateArticle","put","setFavorite","isFavorite","del","getArticleComments","comments","deleteArticle","postComment","comment","deleteComment","commentId","Article","articleData","User","favoritesCount","unshift","index","findIndex","id","splice","controller","ctrl","isNew","form","serverErrors","routeFragment","currentUser","abstractPath","init","router","Form","children","name","initialValue","validate","required","actions","submit","updateTagList","getResult","onFormChange","articleApi","tagsListInput","existingTagsList","getValue","tagsStringInput","newTagsList","split","map","trim","filter","includes","clear","length","onChange","concat","removeTag","tagIndex","Editor","Component","constructor","super","this","onSubmit","e","preventDefault","props","onTagStringKeyPress","key","render","isPending","className","error","i","type","inputClassName","placeholder","disabled","inputProps","rows","onKeyPress","onClick","bind","propTypes","PropTypes"],"sourceRoot":""}