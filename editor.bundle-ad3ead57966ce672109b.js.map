{"version":3,"sources":["webpack:///./src/js/api/article.js","webpack:///./src/js/models/article.js","webpack:///./src/js/pages/editor/editor.js","webpack:///./src/js/pages/editor/editor-controller.js"],"names":["normalizeDates","obj","createdAt","Date","updatedAt","handleArticlesResult","result","articles","forEach","getGlobalFeed","offset","limit","get","then","toJson","getOwnFeed","getTagFeed","tag","getOwnArticles","author","getFavoriteArticles","favorited","getArticle","slug","encodeURIComponent","article","saveArticle","title","description","body","tagList","post","getResponseErrors","updateArticle","put","setFavorite","isFavorite","del","getArticleComments","comments","deleteArticle","postComment","comment","deleteComment","commentId","Article","articleData","User","favoritesCount","unshift","index","findIndex","id","splice","Editor","Component","constructor","super","this","onSubmit","e","preventDefault","props","controller","form","submit","onTagStringKeyPress","key","render","serverErrors","isPending","removeTag","getValue","className","map","error","i","type","inputClassName","placeholder","disabled","inputProps","rows","onKeyPress","length","onClick","bind","propTypes","PropTypes","object","isRequired","Mvc","ctrl","isNew","routeFragment","currentUser","isAuthenticated","abstractPath","init","router","params","transitionTo","Form","children","name","initialValue","validate","validation","required","actions","updateTagList","getResult","onFormChange","articleApi","tagsListInput","existingTagsList","tagsStringInput","newTagsList","split","trim","filter","includes","clear","onChange","concat","tagIndex"],"mappings":"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","file":"editor.bundle-ad3ead57966ce672109b.js","sourcesContent":["import {get, post, put, del} from '../http';\nimport {toJson, getResponseErrors} from './utils';\n\nconst normalizeDates = (obj) => {\n  obj.createdAt = new Date(obj.createdAt);\n  obj.updatedAt = new Date(obj.updatedAt);\n};\n\nconst handleArticlesResult = (result) => {\n  result.articles.forEach(normalizeDates);\n\n  return result;\n};\n\nexport const getGlobalFeed = ({offset, limit}) => {\n  return get('articles', {offset, limit})\n    .then(toJson)\n    .then(handleArticlesResult);\n};\n\nexport const getOwnFeed = ({offset, limit}) => {\n  return get('articles/feed', {offset, limit})\n    .then(toJson)\n    .then(handleArticlesResult);\n};\n\nexport const getTagFeed = ({tag, offset, limit}) => {\n  return get('articles', {tag, offset, limit})\n    .then(toJson)\n    .then(handleArticlesResult);\n};\n\nexport const getOwnArticles = ({author, limit, offset}) => {\n  return get('articles', {author, offset, limit})\n    .then(toJson)\n    .then(handleArticlesResult);\n};\n\nexport const getFavoriteArticles = ({favorited, limit, offset}) => {\n  return get('articles', {favorited, offset, limit})\n    .then(toJson)\n    .then(handleArticlesResult);\n};\n\nexport const getArticle = ({slug}) => {\n  return get(`articles/${encodeURIComponent(slug)}`)\n    .then(toJson)\n    .then(({article}) => {\n      normalizeDates(article);\n\n      return {article};\n    });\n};\n\nexport const saveArticle = ({title, description, body, tagList}) => {\n  return post('articles', {\n    article: {\n      title,\n      description,\n      body,\n      tagList\n    }\n  }).then(toJson, getResponseErrors);\n};\n\nexport const updateArticle = ({slug, title, description, body, tagList}) => {\n  return put(`articles/${encodeURIComponent(slug)}`, {\n    article: {\n      title,\n      description,\n      body,\n      tagList\n    }\n  }).then(toJson, getResponseErrors);\n};\n\nexport const setFavorite = ({slug, isFavorite}) => {\n  const httpFunc = isFavorite ? post : del;\n\n  return httpFunc(`articles/${slug}/favorite`).then(toJson);\n};\n\nexport const getArticleComments = ({slug}) => {\n  return get(`articles/${encodeURIComponent(slug)}/comments`)\n    .then(toJson)\n    .then(({comments}) => {\n      comments.forEach(normalizeDates);\n\n      return {comments};\n    });\n};\n\nexport const deleteArticle = ({slug}) => {\n  return del(`articles/${encodeURIComponent(slug)}`);\n};\n\nexport const postComment = ({slug, comment}) => {\n  return post(`articles/${encodeURIComponent(slug)}/comments`, {\n    comment: {body: comment}\n  }).then(toJson).then(({comment}) => {\n    normalizeDates(comment);\n\n    return {comment};\n  });\n};\n\nexport const deleteComment = ({slug, commentId}) => {\n  return del(`articles/${encodeURIComponent(slug)}/comments/${commentId}`);\n};\n","import {User} from './user';\n\nexport function Article(articleData) {\n  const article = {\n    title: articleData.title,\n    author: new User(articleData.author),\n    description: articleData.description,\n    body: articleData.body,\n    slug: articleData.slug,\n    createdAt: articleData.createdAt,\n    updatedAt: articleData.updatedAt,\n    favorited: articleData.favorited,\n    favoritesCount: articleData.favoritesCount,\n    tagList: articleData.tagList,\n    comments: null\n  };\n\n  article.setFavorite = ({favorited, favoritesCount}) => {\n    article.favorited = favorited;\n    article.favoritesCount = favoritesCount;\n  };\n\n  article.setComments = (comments) => {\n    article.comments = comments;\n  };\n\n  article.addComment = (comment) => {\n    article.comments.unshift(comment);\n  };\n\n  article.deleteComment = (commentId) => {\n    const index = article.comments.findIndex((comment) => comment.id === commentId);\n\n    if (index !== -1) {\n      article.comments.splice(index, 1);\n    }\n  };\n\n  return article;\n}\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {Input} from 'crizmas-components';\n\nexport default class Editor extends Component {\n  constructor() {\n    super();\n\n    this.onSubmit = (e) => {\n      e.preventDefault();\n      this.props.controller.form.submit();\n    };\n\n    this.onTagStringKeyPress = (e) => {\n      if (e.key === 'Enter') {\n        e.preventDefault();\n        this.props.controller.form.get('tagString').submit();\n      }\n    };\n  }\n\n  render() {\n    const {form, serverErrors, isPending, removeTag} = this.props.controller;\n    const tagList = form.get('tagList').getValue();\n\n    return <div className=\"editor-page\">\n      <div className=\"container page\">\n        <div className=\"row\">\n          <div className=\"col-md-10 offset-md-1 col-xs-12\">\n            {serverErrors && <ul className=\"error-messages\">\n              {serverErrors.map((error, i) => <li key={i}>{error}</li>)}\n            </ul>}\n\n            <form onSubmit={this.onSubmit}>\n              <fieldset>\n                <fieldset className=\"form-group\">\n                  <Input\n                    type=\"text\"\n                    inputClassName=\"form-control form-control-lg\"\n                    placeholder=\"Article Title\"\n                    disabled={isPending}\n                    {...form.get('title')} />\n                </fieldset>\n                <fieldset className=\"form-group\">\n                  <Input\n                    type=\"text\"\n                    inputClassName=\"form-control\"\n                    placeholder=\"What's this article about?\"\n                    disabled={isPending}\n                    {...form.get('description')} />\n                </fieldset>\n                <fieldset className=\"form-group\">\n                  <Input\n                    type=\"textarea\"\n                    inputClassName=\"form-control\"\n                    placeholder=\"Write your article (in markdown)\"\n                    inputProps={{rows: \"8\"}}\n                    disabled={isPending}\n                    {...form.get('body')} />\n                </fieldset>\n                <fieldset className=\"form-group\">\n                  <Input\n                    type=\"text\"\n                    inputClassName=\"form-control\"\n                    placeholder=\"Enter tags\"\n                    disabled={isPending}\n                    {...form.get('tagString')}\n                    inputProps={{onKeyPress: this.onTagStringKeyPress}} />\n                  {!!tagList.length && <div className=\"tag-list\">\n                    {tagList.map((tag, i) => <span\n                      key={i}\n                      className=\"tag-default tag-pill\">\n                        <i className=\"ion-close-round\" onClick={removeTag.bind(null, i)} />\n                        {tag}\n                      </span>)}\n                  </div>}\n                </fieldset>\n                <button\n                  className=\"btn btn-lg pull-xs-right btn-primary\"\n                  disabled={isPending}>\n                  Publish Article\n                </button>\n              </fieldset>\n            </form>\n          </div>\n        </div>\n      </div>\n    </div>;\n  }\n}\n\nEditor.propTypes = {\n  controller: PropTypes.object.isRequired\n};\n","import Mvc from 'crizmas-mvc';\nimport Form, {validation} from 'crizmas-form';\n\nimport router from '../../router';\nimport {currentUser} from '../../models/user';\nimport {Article} from '../../models/article';\nimport * as articleApi from '../../api/article';\n\nexport default Mvc.controller(function EditorController() {\n  const ctrl = {\n    isNew: false,\n    form: null,\n    serverErrors: null,\n    article: null\n  };\n\n  ctrl.onEnter = ({routeFragment}) => {\n    if (!currentUser.isAuthenticated) {\n      router.transitionTo('/login');\n\n      return false;\n    }\n\n    ctrl.isNew = !routeFragment.abstractPath;\n\n    if (!ctrl.isNew) {\n      return ctrl.getArticle(router.params.get('slug')).then(\n        init,\n\n        () => {\n          router.transitionTo('/');\n\n          return false;\n        }\n      );\n    }\n\n    init();\n  };\n\n  const init = () => {\n    ctrl.form = new Form({\n      children: [\n        {\n          name: 'title',\n          initialValue: ctrl.article && ctrl.article.title,\n          validate: validation.required()\n        },\n        {\n          name: 'description',\n          initialValue: ctrl.article && ctrl.article.description\n        },\n        {\n          name: 'body',\n          initialValue: ctrl.article && ctrl.article.body,\n          validate: validation.required()\n        },\n        {\n          name: 'tagString',\n\n          actions: {\n            submit: ctrl.updateTagList\n          }\n        },\n        {\n          name: 'tagList',\n          initialValue: ctrl.article && ctrl.article.tagList || []\n        }\n      ],\n\n      actions: {\n        submit: () => {\n          const result = ctrl.form.getResult();\n\n          ctrl.saveArticle({\n            title: result.title,\n            description: result.description,\n            body: result.body,\n            tagList: result.tagList\n          });\n        }\n      },\n\n      onFormChange: () => {\n        ctrl.serverErrors = null;\n      }\n    });\n  };\n\n  ctrl.getArticle = (slug) => {\n    return articleApi.getArticle({slug}).then(({article}) => {\n      ctrl.article = new Article(article);\n    });\n  };\n\n  ctrl.saveArticle = ({title, description, body, tagList}) => {\n    ctrl.serverErrors = null;\n\n    const savePromise = ctrl.isNew\n      ? articleApi.saveArticle({title, description, body, tagList})\n      : articleApi.updateArticle({slug: ctrl.article.slug, title, description, body, tagList});\n\n    return savePromise.then(\n      ({article: {slug}}) => {\n        router.transitionTo(`/article/${slug}`);\n      },\n\n      (serverErrors) => {\n        ctrl.serverErrors = serverErrors;\n      }\n    );\n  };\n\n  ctrl.updateTagList = () => {\n    const tagsListInput = ctrl.form.get('tagList');\n    const existingTagsList = tagsListInput.getValue();\n    const tagsStringInput = ctrl.form.get('tagString');\n    const result = tagsStringInput.getResult();\n    const newTagsList = result && result.split(',')\n      .map((tag) => tag.trim())\n      .filter((tag) => tag && !existingTagsList.includes(tag));\n\n    tagsStringInput.clear();\n\n    if (newTagsList && newTagsList.length) {\n      tagsListInput.onChange(existingTagsList.concat(newTagsList));\n    }\n  };\n\n  ctrl.removeTag = (tagIndex) => {\n    const tagListInput = ctrl.form.get('tagList');\n    const tagList = tagListInput.getValue();\n\n    tagList.splice(tagIndex, 1);\n  };\n\n  return ctrl;\n});\n"],"sourceRoot":""}